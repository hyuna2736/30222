import json
import ast

# 1. 기본 구조 예측 룰
helix_formers = ['A', 'L', 'M', 'Q', 'E', 'K', 'H']
sheet_formers = ['V', 'I', 'Y', 'F', 'W', 'T']
coil_formers  = ['G', 'P', 'S', 'D', 'N']

# 2. JSON에서 유전 질환 연관 변이 로드
def load_disease_db(filepath):
    with open(filepath, 'r', encoding='utf-8') as f:
        raw_data = json.load(f)
    # 문자열 키를 실제 튜플로 변환
    disease_db = {ast.literal_eval(key): value for key, value in raw_data.items()}
    return disease_db

# 3. 구조 예측 함수
def predict_secondary_structure(seq):
    structure = []
    for aa in seq:
        if aa in helix_formers:
            structure.append("H")
        elif aa in sheet_formers:
            structure.append("E")
        else:
            structure.append("C")
    return ''.join(structure)

# 4. 변이 비교 함수
def compare_sequences(seq1, seq2):
    if len(seq1) != len(seq2):
        raise ValueError("서열 길이가 다릅니다. 비교할 수 없습니다.")
    mutations = []
    for i, (aa1, aa2) in enumerate(zip(seq1, seq2), start=1):
        if aa1 != aa2:
            mutations.append((i, aa1, aa2))
    return mutations

# 5. 질병 연관 확인
def check_disease_links(mutations, disease_db):
    related = []
    for pos, orig, mut in mutations:
        key = (pos, orig, mut)
        if key in disease_db:
            related.append((pos, disease_db[key]))
    return related

# 6. 결과 출력
def print_results(seq1, seq2, struct1, struct2, mutations, disease_links):
    print("\n🔬 원본 서열:     ", seq1)
    print("🧬 비교 서열:     ", seq2)
    print("📈 구조 예측(원본):", struct1)
    print("📉 구조 예측(비교):", struct2)

    if mutations:
        print("\n🔍 변이된 위치:")
        for pos, orig, mut in mutations:
            print(f" - {pos}번째: {orig} → {mut}")
        print("\n📌 구조 변화 위치:")
        diff = [" " if a == b else "^" for a, b in zip(struct1, struct2)]
        print("                     " + "".join(diff))
    else:
        print("\n✅ 두 서열은 완전히 동일합니다. 변이가 없습니다.")

    if disease_links:
        print("\n⚠️ 유전 질환 연관 변이 발견:")
        for pos, info in disease_links:
            print(f" - {pos}번째 변이 → 관련 질환: {info['name']}")
            print("   🩺 간호 중재 예시:")
            for note in info["notes"]:
                print("     •", note)
    else:
        print("\n✅ 현재까지 알려진 유전 질환과 관련된 변이는 없습니다.")

# 메인 실행
if __name__ == "__main__":
    print("💡 아미노산 서열 길이는 같아야 합니다.")
    seq1 = input("🔡 원본 아미노산 서열을 입력하세요: ").strip().upper()
    seq2 = input("🔡 비교할 아미노산 서열을 입력하세요: ").strip().upper()

    try:
        disease_db = load_disease_db("mutation_data.json")
        struct1 = predict_secondary_structure(seq1)
        struct2 = predict_secondary_structure(seq2)
        mutations = compare_sequences(seq1, seq2)
        disease_links = check_disease_links(mutations, disease_db)

        print_results(seq1, seq2, struct1, struct2, mutations, disease_links)

    except ValueError as e:
        print("⚠️ 오류:", e)
    except FileNotFoundError:
        print("⚠️ 'mutation_data.json' 파일을 찾을 수 없습니다. 동일한 폴더에 있어야 합니다.")
